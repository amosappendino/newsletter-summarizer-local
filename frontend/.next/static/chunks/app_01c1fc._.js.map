{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/amos/Random%20Projects/6.S093%20-%20How%20to%20ship%20almost%20anything%20with%20AI/Final%20Project%20IAP%20Sundai%20/frontend/app/services/api.ts"],"sourcesContent":["import axios from \"axios\";\n\n// Base URL pointing to your backend API\nconst API_BASE_URL = \"http://127.0.0.1:8000\";\n\n// Define interfaces for the response types\ninterface Email {\n    id: number;\n    sender: string;\n    subject: string;\n}\n\ninterface SummaryResponse {\n    summary: string;\n}\n\n/**\n * Fetch emails by sender or subject.\n * @param query The search query for emails.\n * @returns List of matching emails (id, sender, subject).\n */\nexport const searchEmails = async (query: string): Promise<Email[]> => {\n    try {\n        const response = await axios.get(`${API_BASE_URL}/search-emails/`, {\n            params: { query },\n        });\n        // Ensure we're returning an array\n        return Array.isArray(response.data) ? response.data : [];\n    } catch (error) {\n        console.error(\"Error fetching emails:\", error);\n        throw error;\n    }\n};\n\n/**\n * Summarize the email content by email ID.\n * @param emailId The ID of the email to summarize.\n * @returns Summarized content of the email.\n */\nexport const summarizeEmail = async (emailId: number): Promise<string> => {\n    try {\n        const response = await axios.get<SummaryResponse>(`${API_BASE_URL}/summarize-email/`, {\n            params: { email_id: emailId },\n        });\n        // Return just the summary string from the response\n        return response.data.summary || '';\n    } catch (error) {\n        console.error(\"Error summarizing email:\", error);\n        throw error;\n    }\n};\n"],"names":[],"mappings":";;;;AAAA;;AAEA,wCAAwC;AACxC,MAAM,eAAe;AAkBd,MAAM,eAAe,OAAO;IAC/B,IAAI;QACA,MAAM,WAAW,MAAM,wIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,GAAG,aAAa,eAAe,CAAC,EAAE;YAC/D,QAAQ;gBAAE;YAAM;QACpB;QACA,kCAAkC;QAClC,OAAO,MAAM,OAAO,CAAC,SAAS,IAAI,IAAI,SAAS,IAAI,GAAG,EAAE;IAC5D,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM;IACV;AACJ;AAOO,MAAM,iBAAiB,OAAO;IACjC,IAAI;QACA,MAAM,WAAW,MAAM,wIAAA,CAAA,UAAK,CAAC,GAAG,CAAkB,GAAG,aAAa,iBAAiB,CAAC,EAAE;YAClF,QAAQ;gBAAE,UAAU;YAAQ;QAChC;QACA,mDAAmD;QACnD,OAAO,SAAS,IAAI,CAAC,OAAO,IAAI;IACpC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,MAAM;IACV;AACJ"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/amos/Random%20Projects/6.S093%20-%20How%20to%20ship%20almost%20anything%20with%20AI/Final%20Project%20IAP%20Sundai%20/frontend/app/page.tsx"],"sourcesContent":["\"use client\";\nimport { useState, useEffect } from \"react\";\nimport { searchEmails, summarizeEmail } from \"./services/api\";\n\n// Define types for email data\ninterface Email {\n    id: number;\n    sender: string;\n    subject: string;\n}\n\nexport default function HomePage() {\n    const [query, setQuery] = useState<string>(\"\");\n    const [emails, setEmails] = useState<Email[]>([]);\n    const [selectedEmail, setSelectedEmail] = useState<number | null>(null);\n    const [summary, setSummary] = useState<string>(\"\");\n    const [isSearching, setIsSearching] = useState<boolean>(false);\n    const [isSummarizing, setIsSummarizing] = useState<boolean>(false);\n    const [searchError, setSearchError] = useState<string | null>(null);\n    const [summaryError, setSummaryError] = useState<string | null>(null);\n    const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n\n    // Add authentication check\n    useEffect(() => {\n        const checkAuth = async () => {\n            try {\n                const response = await fetch('http://localhost:8000/check-auth');\n                const data = await response.json();\n                \n                if (data.status === 'unauthenticated') {\n                    window.location.href = '/login';\n                } else {\n                    setIsAuthenticated(true);\n                }\n            } catch (error) {\n                console.error('Error checking auth status:', error);\n                window.location.href = '/login';\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        checkAuth();\n    }, []);\n\n    const handleSearch = async () => {\n        if (!query.trim()) return;\n        \n        setIsSearching(true);\n        setSearchError(null);\n        setEmails([]); // Clear previous results\n\n        try {\n            const response = await searchEmails(query);\n            if (response && Array.isArray(response)) {\n                setEmails(response);\n                if (response.length === 0) {\n                    setSearchError(\"No emails found matching your search.\");\n                }\n            } else {\n                console.error(\"Invalid response format:\", response);\n                setSearchError(\"Error fetching emails. Please try again.\");\n            }\n        } catch (error) {\n            console.error(\"Error searching emails:\", error);\n            setSearchError(\"Failed to search emails. Please try again.\");\n        } finally {\n            setIsSearching(false);\n        }\n    };\n\n    const handleSummarize = async (emailId: number) => {\n        if (isSummarizing) return;\n        \n        setSelectedEmail(emailId);\n        setSummaryError(null);\n        setIsSummarizing(true);\n\n        try {\n            const summary = await summarizeEmail(emailId);\n            if (summary) {\n                setSummary(summary);\n            } else {\n                setSummaryError(\"Failed to generate summary.\");\n            }\n        } catch (error) {\n            console.error(\"Error summarizing email:\", error);\n            setSummaryError(\"Failed to generate summary. Please try again.\");\n        } finally {\n            setIsSummarizing(false);\n        }\n    };\n\n    const handleLogout = async () => {\n        try {\n            const response = await fetch('http://localhost:8000/logout');\n            const data = await response.json();\n            \n            if (response.ok) {\n                // Clear local state\n                setEmails([]);\n                setSummary(\"\");\n                setQuery(\"\");\n                setIsAuthenticated(false);\n                // Redirect to login page\n                window.location.href = '/login';\n            } else {\n                console.error('Logout failed:', data);\n            }\n        } catch (error) {\n            console.error('Error logging out:', error);\n        }\n    };\n\n    if (isLoading) {\n        return (\n            <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n                <div className=\"text-center text-gray-600\">\n                    Loading...\n                </div>\n            </div>\n        );\n    }\n\n    if (!isAuthenticated) {\n        return (\n            <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n                <div className=\"text-center text-gray-600\">\n                    Redirecting to login...\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"min-h-screen flex flex-col items-center justify-center bg-gray-50 dark:bg-gray-900 p-8\">\n            <button\n                onClick={handleLogout}\n                className=\"absolute top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600\"\n            >\n                Logout\n            </button>\n\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-6\">\n                Newsletter Summarizer\n            </h1>\n\n            <div className=\"w-full max-w-md space-y-4\">\n                <div className=\"flex space-x-2\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Search emails by sender or subject...\"\n                        value={query}\n                        onChange={(e) => setQuery(e.target.value)}\n                        maxLength={100}\n                        className=\"flex-1 border p-2 rounded\"\n                    />\n                    <button\n                        onClick={handleSearch}\n                        disabled={isSearching || !query.trim()}\n                        className={`bg-blue-500 text-white px-4 py-2 rounded-md ${\n                            isSearching || !query.trim() ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-600'\n                        }`}\n                    >\n                        {isSearching ? 'Searching...' : 'Search'}\n                    </button>\n                </div>\n\n                {searchError && (\n                    <div className=\"text-red-600 bg-red-100 p-3 rounded-md\">\n                        {searchError}\n                    </div>\n                )}\n\n                {emails.length > 0 && (\n                    <ul className=\"space-y-2\">\n                        {emails.map((email) => (\n                            <li\n                                key={email.id}\n                                onClick={() => !isSummarizing && handleSummarize(email.id)}\n                                className={`cursor-pointer p-4 bg-white dark:bg-gray-800 rounded-md shadow-sm hover:shadow-md transition-shadow ${\n                                    isSummarizing && selectedEmail === email.id ? 'opacity-50' : ''\n                                }`}\n                            >\n                                <strong className=\"block text-gray-900 dark:text-white\">{email.subject}</strong>\n                                <span className=\"text-sm text-gray-600 dark:text-gray-400\">{email.sender}</span>\n                                \n                                {isSummarizing && selectedEmail === email.id && (\n                                    <p className=\"text-sm text-blue-500 mt-2\">Generating summary...</p>\n                                )}\n                                {summaryError && selectedEmail === email.id && (\n                                    <p className=\"text-sm text-red-600 mt-2\">{summaryError}</p>\n                                )}\n                            </li>\n                        ))}\n                    </ul>\n                )}\n\n                {summary && selectedEmail && (\n                    <div className=\"mt-8 p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg\">\n                        <h2 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-white\">Summary</h2>\n                        <p className=\"text-gray-700 dark:text-gray-300\">{summary}</p>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;;;AAFA;;;AAWe,SAAS;;IACpB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAC3C,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAW,EAAE;IAChD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAC/C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAW;IACxD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAW;IAC5D,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAC9D,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAChE,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAW;IAChE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAW;IAEpD,2BAA2B;IAC3B,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;8BAAE;YACN,MAAM;gDAAY;oBACd,IAAI;wBACA,MAAM,WAAW,MAAM,MAAM;wBAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;wBAEhC,IAAI,KAAK,MAAM,KAAK,mBAAmB;4BACnC,OAAO,QAAQ,CAAC,IAAI,GAAG;wBAC3B,OAAO;4BACH,mBAAmB;wBACvB;oBACJ,EAAE,OAAO,OAAO;wBACZ,QAAQ,KAAK,CAAC,+BAA+B;wBAC7C,OAAO,QAAQ,CAAC,IAAI,GAAG;oBAC3B,SAAU;wBACN,aAAa;oBACjB;gBACJ;;YAEA;QACJ;6BAAG,EAAE;IAEL,MAAM,eAAe;QACjB,IAAI,CAAC,MAAM,IAAI,IAAI;QAEnB,eAAe;QACf,eAAe;QACf,UAAU,EAAE,GAAG,yBAAyB;QAExC,IAAI;YACA,MAAM,WAAW,MAAM,CAAA,GAAA,yHAAA,CAAA,eAAY,AAAD,EAAE;YACpC,IAAI,YAAY,MAAM,OAAO,CAAC,WAAW;gBACrC,UAAU;gBACV,IAAI,SAAS,MAAM,KAAK,GAAG;oBACvB,eAAe;gBACnB;YACJ,OAAO;gBACH,QAAQ,KAAK,CAAC,4BAA4B;gBAC1C,eAAe;YACnB;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,2BAA2B;YACzC,eAAe;QACnB,SAAU;YACN,eAAe;QACnB;IACJ;IAEA,MAAM,kBAAkB,OAAO;QAC3B,IAAI,eAAe;QAEnB,iBAAiB;QACjB,gBAAgB;QAChB,iBAAiB;QAEjB,IAAI;YACA,MAAM,UAAU,MAAM,CAAA,GAAA,yHAAA,CAAA,iBAAc,AAAD,EAAE;YACrC,IAAI,SAAS;gBACT,WAAW;YACf,OAAO;gBACH,gBAAgB;YACpB;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,gBAAgB;QACpB,SAAU;YACN,iBAAiB;QACrB;IACJ;IAEA,MAAM,eAAe;QACjB,IAAI;YACA,MAAM,WAAW,MAAM,MAAM;YAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,IAAI,SAAS,EAAE,EAAE;gBACb,oBAAoB;gBACpB,UAAU,EAAE;gBACZ,WAAW;gBACX,SAAS;gBACT,mBAAmB;gBACnB,yBAAyB;gBACzB,OAAO,QAAQ,CAAC,IAAI,GAAG;YAC3B,OAAO;gBACH,QAAQ,KAAK,CAAC,kBAAkB;YACpC;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,sBAAsB;QACxC;IACJ;IAEA,IAAI,WAAW;QACX,qBACI,6LAAC;YAAI,WAAU;sBACX,cAAA,6LAAC;gBAAI,WAAU;0BAA4B;;;;;;;;;;;IAKvD;IAEA,IAAI,CAAC,iBAAiB;QAClB,qBACI,6LAAC;YAAI,WAAU;sBACX,cAAA,6LAAC;gBAAI,WAAU;0BAA4B;;;;;;;;;;;IAKvD;IAEA,qBACI,6LAAC;QAAI,WAAU;;0BACX,6LAAC;gBACG,SAAS;gBACT,WAAU;0BACb;;;;;;0BAID,6LAAC;gBAAG,WAAU;0BAAwD;;;;;;0BAItE,6LAAC;gBAAI,WAAU;;kCACX,6LAAC;wBAAI,WAAU;;0CACX,6LAAC;gCACG,MAAK;gCACL,aAAY;gCACZ,OAAO;gCACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;gCACxC,WAAW;gCACX,WAAU;;;;;;0CAEd,6LAAC;gCACG,SAAS;gCACT,UAAU,eAAe,CAAC,MAAM,IAAI;gCACpC,WAAW,CAAC,4CAA4C,EACpD,eAAe,CAAC,MAAM,IAAI,KAAK,kCAAkC,qBACnE;0CAED,cAAc,iBAAiB;;;;;;;;;;;;oBAIvC,6BACG,6LAAC;wBAAI,WAAU;kCACV;;;;;;oBAIR,OAAO,MAAM,GAAG,mBACb,6LAAC;wBAAG,WAAU;kCACT,OAAO,GAAG,CAAC,CAAC,sBACT,6LAAC;gCAEG,SAAS,IAAM,CAAC,iBAAiB,gBAAgB,MAAM,EAAE;gCACzD,WAAW,CAAC,oGAAoG,EAC5G,iBAAiB,kBAAkB,MAAM,EAAE,GAAG,eAAe,IAC/D;;kDAEF,6LAAC;wCAAO,WAAU;kDAAuC,MAAM,OAAO;;;;;;kDACtE,6LAAC;wCAAK,WAAU;kDAA4C,MAAM,MAAM;;;;;;oCAEvE,iBAAiB,kBAAkB,MAAM,EAAE,kBACxC,6LAAC;wCAAE,WAAU;kDAA6B;;;;;;oCAE7C,gBAAgB,kBAAkB,MAAM,EAAE,kBACvC,6LAAC;wCAAE,WAAU;kDAA6B;;;;;;;+BAbzC,MAAM,EAAE;;;;;;;;;;oBAoB5B,WAAW,+BACR,6LAAC;wBAAI,WAAU;;0CACX,6LAAC;gCAAG,WAAU;0CAA2D;;;;;;0CACzE,6LAAC;gCAAE,WAAU;0CAAoC;;;;;;;;;;;;;;;;;;;;;;;;AAMzE;GArMwB;KAAA"}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}